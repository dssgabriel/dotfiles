# STLYE ###
# Colorscheme
colorscheme chocolate

# Line numbers
add-highlighter global/ number-lines -relative -hlcursor -min-digits 6 -separator '│ '
add-highlighter global/ show-matching
add-highlighter global/ wrap -indent -word -marker '… '

# Indentation
set-option global tabstop 4
set-option global indentwidth 4
set-option global scrolloff 4,0
set-option -add global matching_pairs < > " " ' '

# UI options
set global ui_options terminal_set_title=true
set global ui_options terminal_enable_mouse=true
set global ui_options terminal_assistant=bat

### KEYBINDINGS ###
# Mode declarations
declare-user-mode file
declare-user-mode clip

# Vim paragraph navigation addiction
map global normal { [p
map global normal } ]p
# But that means we need new keys for the original {} functionality
map global user [ { -docstring "ext to obj begin"
map global user ] } -docstring "ext to obj end"

# Normal mode
map global normal <a-h> ': buffer-previous<ret>'
map global normal <a-l> ': buffer-next<ret>'

map global normal <space> , -docstring 'leader'
map global normal , <space>
map global normal & ':align-with-spaces<ret>'

# User mode (leader)
map global user -docstring 'Clipboard'              y ': enter-user-mode clip<ret>'
map global user -docstring 'Comment lines'          c ': comment-line<ret>'

# Clip mode (y)
map global clip -docstring 'yank to system clipboard'      y '<a-|>xclip -sel clip<ret>'
map global clip -docstring 'paste (after) from clipboard'  p '<a-!>xclip -o -sel clip<ret>'
map global clip -docstring 'paste (before) from clipboard' P '!xclip -o -sel clip<ret>'

# LSP mode
map global user l %{: enter-user-mode lsp<ret>} -docstring "LSP mode"

# Remove whitespace
define-command stripw %{ try %{ execute-keys -draft \%s\h+$<ret>d } }
map global user w ':stripw<ret>'


### HOOKS ###
hook global WinSetOption comment_line=(.*) %{
    add-highlighter -override window/todo regex "\Q%val{hook_param_capture_1}\E\h*(TODO:|FIXME:|NOTE:|XXX:)[^\n]*" 1:yellow
}

# Insert Mode
hook global InsertCompletionShow .* %{
    try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
        hook -once -always window InsertCompletionHide .* %{
            unmap window insert <tab> <c-n>
            unmap window insert <s-tab> <c-p>
        }
    }
}

hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

hook global BufCreate .*[.]yuck %{
    set-option buffer filetype scheme
    set-option global tabstop 2
    set-option global indentwidth 2
}

hook global BufCreate .*[.]rasi %{
    set-option buffer filetype css
}

hook global BufCreate .*[.]f %{
    set-option buffer filetype f90
}

# Enable kak-lsp
eval %sh{kak-lsp --kakoune -s $kak_session}
hook global WinSetOption filetype=(bash|c|cpp|fish|go|haskell|java|python|zig|lua) %{
    lsp-enable-window
    # Auto-formatting on save
    hook window BufWritePre .* lsp-formatting-sync
}

# Rust inlay hints
hook global WinSetOption filetype=rust %{
    set-option fmtcmd "rustfmt"
    lsp-enable-window
    lsp-inlay-hints-enable global
    lsp-inlay-diagnostics-enable global
    # Auto-formatting on save
    hook window BufWritePre .* lsp-formatting-sync
    hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
    hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
    hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
    hook -once -always window WinSetOption filetype=.* %{
        remove-hooks window semantic-tokens
    }
}

hook global WinSetOption filetype=lua %{
    set-option fmtcmd "lua-format"
}

# Enable Markdown in info box
face global InlayHint             	  rgb:615c5a,rgb:302c2b+bd
face global InfoDefault               Information
face global InfoBlock                 Information
face global InfoBlockQuote            Information
face global InfoBullet                Information
face global InfoHeader                Information
face global InfoLink                  Information
face global InfoLinkMono              Information
face global InfoMono                  Information
face global InfoRule                  Information
face global InfoDiagnosticError       Information
face global InfoDiagnosticHint        Information
face global InfoDiagnosticInformation Information
face global InfoDiagnosticWarning     Information

### PLUGINS ###
# Manager
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

# Modeline
plug "andreyorst/powerline.kak" defer powerline %{
    powerline-format global 'git bufname filetype mode_info line_column position'
    powerline-separator none
} defer powerline_bufname %{
    set-option global powerline_shorten_bufname 'short'
} defer powerline_gruvbox %{
    powerline-theme gruvbox
} config %{
    powerline-start
}

# Buffer helper
plug 'delapouite/kakoune-buffers' %{
    map global normal ^ q
    map global normal <a-^> Q
    map global normal q b
    map global normal Q B
    map global normal <a-q> <a-b>
    map global normal <a-Q> <a-B>
    map global normal b ': enter-buffers-mode<ret>'            -docstring 'buffers'
    map global normal B ': enter-user-mode -lock buffers<ret>' -docstring 'buffers (lock)'

    map global user b ':enter-buffers-mode<ret>'               -docstring 'buffers…'
    map global user B ':enter-user-mode -lock buffers<ret>'    -docstring 'buffers (lock)…'

    hook global WinDisplay .* info-buffers

    alias global bd delete-buffer
    alias global bf buffer-first
    alias global bl buffer-last
    alias global bo buffer-only
    alias global bo! buffer-only-force
}

# Clipboard plugin
plug "lePerdu/kakboard" %{
    hook global WinCreate .* %{ kakboard-enable }
}

# Fuzzy finder
plug "andreyorst/fzf.kak" config %{
    require-module fzf
    map global user f ': fzf-mode<ret>' -docstring 'fzf'
} defer fzf-file %{
    set-option global fzf_file_command 'fd'
    set-option global fzf_highlight_command 'bat'
}

plug "andreyorst/smarttab.kak" defer smarttab %{
    # when `backspace' is pressed, 4 spaces are deleted at once
    set-option global softtabstop 4
} config %{
    # these languages will use `expandtab' behavior
    hook global WinSetOption filetype=(bash|c|cpp|zig|java|python|rust|markdown|kak|scheme|sh) expandtab
}

plug "freevryheid/f90.kak" %{}
